
demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000508  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00000508  0000059c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008000fc  008000fc  00000638  2**0
                  ALLOC
  3 .noinit       00000000  00800112  00800112  00000638  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000638  2**0
                  CONTENTS
  5 .stab         00001248  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      0000098a  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54
   4:	0c 94 45 00 	jmp	0x8a
   8:	0c 94 45 00 	jmp	0x8a
   c:	0c 94 45 00 	jmp	0x8a
  10:	0c 94 45 00 	jmp	0x8a
  14:	0c 94 45 00 	jmp	0x8a
  18:	0c 94 45 00 	jmp	0x8a
  1c:	0c 94 45 00 	jmp	0x8a
  20:	0c 94 45 00 	jmp	0x8a
  24:	0c 94 45 00 	jmp	0x8a
  28:	0c 94 47 00 	jmp	0x8e
  2c:	0c 94 45 00 	jmp	0x8a
  30:	0c 94 45 00 	jmp	0x8a
  34:	0c 94 45 00 	jmp	0x8a
  38:	0c 94 45 00 	jmp	0x8a
  3c:	0c 94 45 00 	jmp	0x8a
  40:	0c 94 45 00 	jmp	0x8a
  44:	0c 94 45 00 	jmp	0x8a
  48:	0c 94 45 00 	jmp	0x8a
  4c:	0c 94 45 00 	jmp	0x8a
  50:	0c 94 45 00 	jmp	0x8a

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 3f       	cpi	r26, 0xFC	; 252
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	ac ef       	ldi	r26, 0xFC	; 252
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 31       	cpi	r26, 0x12	; 18
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e
  86:	0c 94 60 01 	jmp	0x2c0

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0

0000008e <__vector_10>:
unsigned char DELAY1, DELAY2, DELAY3, RUN1, RUN2, RUN3, STOP1, STOP2, STOP3;


SIGNAL(SIG_OUTPUT_COMPARE0)
{
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	2f 93       	push	r18
  9a:	3f 93       	push	r19
  9c:	4f 93       	push	r20
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	ef 93       	push	r30
  a4:	ff 93       	push	r31
	static unsigned char timer1, timer2, timer3;		//these control the step frequency

	static unsigned char step1, step2, step3;		//state of the stepper motors
	static unsigned char ls1, ls2, ls3;
	static unsigned char bmode1, bmode2, bmode3;
	
	static unsigned char btable[]={0,60,47,41,37,34,31,28,26,24,23,21,20,19,18,17,16,15,15,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14};
	
	char reload1;
		
	
	if(RUN1){
  a6:	80 91 0a 01 	lds	r24, 0x010A
  aa:	88 23       	and	r24, r24
  ac:	09 f4       	brne	.+2      	; 0xb0
  ae:	cd c0       	rjmp	.+410    	; 0x24a
		if( (step1%4==3) && (PIND&0x01) ){
  b0:	30 91 ff 00 	lds	r19, 0x00FF
  b4:	93 2f       	mov	r25, r19
  b6:	83 2f       	mov	r24, r19
  b8:	83 70       	andi	r24, 0x03	; 3
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	09 f4       	brne	.+2      	; 0xc0
  be:	c7 c0       	rjmp	.+398    	; 0x24e
			ls1 = 1;
			PORTC = (PORTC & 0x7F)|0x80;
		}
		
		if(!(--timer1)){
  c0:	20 91 fc 00 	lds	r18, 0x00FC
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	20 93 fc 00 	sts	0x00FC, r18
  ca:	22 23       	and	r18, r18
  cc:	09 f0       	breq	.+2      	; 0xd0
  ce:	bd c0       	rjmp	.+378    	; 0x24a
			reload1 = 1;
  d0:	41 e0       	ldi	r20, 0x01	; 1
			timer1 = DELAY1;	//reload timer
  d2:	80 91 10 01 	lds	r24, 0x0110
  d6:	80 93 fc 00 	sts	0x00FC, r24
	
			if(++step1 == 48){
  da:	39 2f       	mov	r19, r25
  dc:	34 0f       	add	r19, r20
  de:	30 93 ff 00 	sts	0x00FF, r19
  e2:	30 33       	cpi	r19, 0x30	; 48
  e4:	09 f4       	brne	.+2      	; 0xe8
  e6:	ad c0       	rjmp	.+346    	; 0x242
				step1 = 0;
			}
			
			if( ((step1%4)==0) && ls1 ){
  e8:	93 2f       	mov	r25, r19
  ea:	93 70       	andi	r25, 0x03	; 3
  ec:	51 f4       	brne	.+20     	; 0x102
  ee:	80 91 02 01 	lds	r24, 0x0102
  f2:	88 23       	and	r24, r24
  f4:	31 f0       	breq	.+12     	; 0x102
				ls1 = 0;
  f6:	90 93 02 01 	sts	0x0102, r25
				
				//PORTC = (PORTC & 0x07)|((step1<<1)&0xF8);
				PORTC&=0x7F;
  fa:	af 98       	cbi	0x15, 7	; 21
				step1 = 0;
  fc:	39 2f       	mov	r19, r25
  fe:	90 93 ff 00 	sts	0x00FF, r25
			}
			
			PORTC = (PORTC & 0xFC)| ( (step1%4) ^ (step1%4)>>1 ); //set motor to new position
 102:	85 b3       	in	r24, 0x15	; 21
 104:	8c 7f       	andi	r24, 0xFC	; 252
 106:	93 2f       	mov	r25, r19
 108:	93 70       	andi	r25, 0x03	; 3
 10a:	29 2f       	mov	r18, r25
 10c:	26 95       	lsr	r18
 10e:	92 27       	eor	r25, r18
 110:	89 2b       	or	r24, r25
 112:	85 bb       	out	0x15, r24	; 21
			
			if(STOP1 != 0xFF){
 114:	80 91 0b 01 	lds	r24, 0x010B
 118:	8f 3f       	cpi	r24, 0xFF	; 255
 11a:	71 f0       	breq	.+28     	; 0x138
				char tmp;
				if((char)(STOP1-step1)>=0){
 11c:	83 1b       	sub	r24, r19
 11e:	87 fd       	sbrc	r24, 7
 120:	8d c0       	rjmp	.+282    	; 0x23c
					tmp = STOP1-step1;
 122:	98 2f       	mov	r25, r24
				}else{
					tmp = (STOP1-step1)+48;
				}

				if (bmode1 == 1){
 124:	80 91 05 01 	lds	r24, 0x0105
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	09 f4       	brne	.+2      	; 0x12e
 12c:	78 c0       	rjmp	.+240    	; 0x21e
					DELAY1 = btable[tmp];
					if (DELAY1 == 0){
						RUN1 = 0;
						bmode1 = 0;
					}
				}else if (tmp  == 0){
 12e:	99 23       	and	r25, r25
 130:	19 f4       	brne	.+6      	; 0x138
					bmode1 = 1;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 05 01 	sts	0x0105, r24
				}
				
			}
			
		}else{
			reload1 = 0;
		}
	}else{
		reload1 = 0;
	}

	if( RUN2 ){
 138:	80 91 0c 01 	lds	r24, 0x010C
 13c:	88 23       	and	r24, r24
 13e:	09 f4       	brne	.+2      	; 0x142
 140:	8d c0       	rjmp	.+282    	; 0x25c
		if( ((step2&0x03)==3) && (PIND&0x02) ){
 142:	30 91 00 01 	lds	r19, 0x0100
 146:	23 2f       	mov	r18, r19
 148:	83 2f       	mov	r24, r19
 14a:	99 27       	eor	r25, r25
 14c:	83 70       	andi	r24, 0x03	; 3
 14e:	90 70       	andi	r25, 0x00	; 0
 150:	03 97       	sbiw	r24, 0x03	; 3
 152:	09 f4       	brne	.+2      	; 0x156
 154:	5d c0       	rjmp	.+186    	; 0x210
			ls2 = 1;
			PORTC = (PORTC & 0x7F)|0x80;
		}
		if(!(--timer2)){
 156:	90 91 fd 00 	lds	r25, 0x00FD
 15a:	89 2f       	mov	r24, r25
 15c:	81 50       	subi	r24, 0x01	; 1
 15e:	80 93 fd 00 	sts	0x00FD, r24
 162:	88 23       	and	r24, r24
 164:	09 f0       	breq	.+2      	; 0x168
 166:	7a c0       	rjmp	.+244    	; 0x25c
			if (reload1){timer2++;}else{
 168:	44 23       	and	r20, r20
 16a:	19 f0       	breq	.+6      	; 0x172
 16c:	90 93 fd 00 	sts	0x00FD, r25
 170:	75 c0       	rjmp	.+234    	; 0x25c
			timer2 = DELAY2;	//reload timer
 172:	80 91 09 01 	lds	r24, 0x0109
 176:	80 93 fd 00 	sts	0x00FD, r24
	
			if(++step2 == 48){
 17a:	32 2f       	mov	r19, r18
 17c:	3f 5f       	subi	r19, 0xFF	; 255
 17e:	30 93 00 01 	sts	0x0100, r19
 182:	30 33       	cpi	r19, 0x30	; 48
 184:	09 f4       	brne	.+2      	; 0x188
 186:	40 c0       	rjmp	.+128    	; 0x208
				step2 = 0;
			}
			
			
			if( ((step2%4)==0) && ls2 ){
 188:	93 2f       	mov	r25, r19
 18a:	93 70       	andi	r25, 0x03	; 3
 18c:	51 f4       	brne	.+20     	; 0x1a2
 18e:	80 91 03 01 	lds	r24, 0x0103
 192:	88 23       	and	r24, r24
 194:	31 f0       	breq	.+12     	; 0x1a2
				ls2 = 0;
 196:	90 93 03 01 	sts	0x0103, r25
				step2 = 0;
 19a:	39 2f       	mov	r19, r25
 19c:	90 93 00 01 	sts	0x0100, r25
				PORTC = (PORTC & 0x7F);
 1a0:	af 98       	cbi	0x15, 7	; 21
			}
			
			PORTC = (PORTC & 0xE7)| ( (step2%4) ^ (step2%4)>>1 )<<3; //set motor to new position
 1a2:	25 b3       	in	r18, 0x15	; 21
 1a4:	27 7e       	andi	r18, 0xE7	; 231
 1a6:	83 2f       	mov	r24, r19
 1a8:	83 70       	andi	r24, 0x03	; 3
 1aa:	98 2f       	mov	r25, r24
 1ac:	96 95       	lsr	r25
 1ae:	89 27       	eor	r24, r25
 1b0:	99 27       	eor	r25, r25
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	28 2b       	or	r18, r24
 1c0:	25 bb       	out	0x15, r18	; 21
			
			if(STOP2 != 0xFF){
 1c2:	80 91 0f 01 	lds	r24, 0x010F
 1c6:	8f 3f       	cpi	r24, 0xFF	; 255
 1c8:	09 f4       	brne	.+2      	; 0x1cc
 1ca:	48 c0       	rjmp	.+144    	; 0x25c
				char tmp;
				if((char)(STOP2-step2)>=0){
 1cc:	83 1b       	sub	r24, r19
 1ce:	87 fd       	sbrc	r24, 7
 1d0:	18 c0       	rjmp	.+48     	; 0x202
					tmp = STOP2-step2;
 1d2:	e8 2f       	mov	r30, r24
				}else{
					tmp = (STOP2-step2)+48;
				}
				
				if (bmode2 == 1){
 1d4:	80 91 06 01 	lds	r24, 0x0106
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	31 f0       	breq	.+12     	; 0x1e8
					DELAY2 = btable[tmp];
					if (DELAY2 == 0){
						RUN2 = 0;
						bmode2 = 0;
					}
				}else if ( tmp == 0  ){
 1dc:	ee 23       	and	r30, r30
 1de:	f1 f5       	brne	.+124    	; 0x25c
					bmode2 = 1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 06 01 	sts	0x0106, r24
 1e6:	3a c0       	rjmp	.+116    	; 0x25c
 1e8:	ff 27       	eor	r31, r31
 1ea:	e7 fd       	sbrc	r30, 7
 1ec:	f0 95       	com	r31
 1ee:	e0 5a       	subi	r30, 0xA0	; 160
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	80 81       	ld	r24, Z
 1f4:	80 93 09 01 	sts	0x0109, r24
 1f8:	88 23       	and	r24, r24
 1fa:	81 f5       	brne	.+96     	; 0x25c
 1fc:	80 93 0c 01 	sts	0x010C, r24
 200:	f0 cf       	rjmp	.-32     	; 0x1e2
 202:	e8 2f       	mov	r30, r24
 204:	e0 5d       	subi	r30, 0xD0	; 208
 206:	e6 cf       	rjmp	.-52     	; 0x1d4
 208:	34 2f       	mov	r19, r20
 20a:	40 93 00 01 	sts	0x0100, r20
 20e:	bc cf       	rjmp	.-136    	; 0x188
 210:	81 9b       	sbis	0x10, 1	; 16
 212:	a1 cf       	rjmp	.-190    	; 0x156
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 03 01 	sts	0x0103, r24
 21a:	af 9a       	sbi	0x15, 7	; 21
 21c:	9c cf       	rjmp	.-200    	; 0x156
 21e:	e9 2f       	mov	r30, r25
 220:	ff 27       	eor	r31, r31
 222:	e7 fd       	sbrc	r30, 7
 224:	f0 95       	com	r31
 226:	e0 5a       	subi	r30, 0xA0	; 160
 228:	ff 4f       	sbci	r31, 0xFF	; 255
 22a:	80 81       	ld	r24, Z
 22c:	80 93 10 01 	sts	0x0110, r24
 230:	88 23       	and	r24, r24
 232:	09 f0       	breq	.+2      	; 0x236
 234:	81 cf       	rjmp	.-254    	; 0x138
 236:	80 93 0a 01 	sts	0x010A, r24
 23a:	7c cf       	rjmp	.-264    	; 0x134
 23c:	98 2f       	mov	r25, r24
 23e:	90 5d       	subi	r25, 0xD0	; 208
 240:	71 cf       	rjmp	.-286    	; 0x124
 242:	32 2f       	mov	r19, r18
 244:	20 93 ff 00 	sts	0x00FF, r18
 248:	4f cf       	rjmp	.-354    	; 0xe8
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	75 cf       	rjmp	.-278    	; 0x138
 24e:	80 9b       	sbis	0x10, 0	; 16
 250:	37 cf       	rjmp	.-402    	; 0xc0
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 02 01 	sts	0x0102, r24
 258:	af 9a       	sbi	0x15, 7	; 21
 25a:	32 cf       	rjmp	.-412    	; 0xc0
				}
				
			}
			}
			
		}
	}
}
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	4f 91       	pop	r20
 266:	3f 91       	pop	r19
 268:	2f 91       	pop	r18
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <timer0_on>:

void timer0_on(){
/* 	TCCR0: FOC0 WGM00 COM01 COM00 WGM01 CS02 CS01 CS00
		CS02 CS01 CS00
		 0    0    0	       stop
		 0    0    1       clk
		 0    1    0       clk/8
		 0    1    1       clk/64
		 1    0    0       clk/256
		 1    0    1       clk/1024
	
*/
	TCCR0 = 0x0A;	// CTC Mode, clk/8
 274:	8a e0       	ldi	r24, 0x0A	; 10
 276:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;	// reset timer
 278:	12 be       	out	0x32, r1	; 50
	OCR0 = 0xFF;	// Compare with this value
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	8c bf       	out	0x3c, r24	; 60
	TIMSK = 0x02;	// Compare match Interrupt on
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	89 bf       	out	0x39, r24	; 57
}
 282:	08 95       	ret

00000284 <timer0_off>:

void timer0_off(){
	TIMSK = 0;
 284:	19 be       	out	0x39, r1	; 57
}
 286:	08 95       	ret

00000288 <init_Ports>:


void init_Ports(){
	DDRB = 0; 	//Port B all inputs
 288:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x0F;	//Pullups on on Button pins
 28a:	8f e0       	ldi	r24, 0x0F	; 15
 28c:	88 bb       	out	0x18, r24	; 24
	
	DDRC = 0xFF; 	//Port C all outputs
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x0;	//Power off
 292:	15 ba       	out	0x15, r1	; 21
	
	DDRD = 0;	//Port D to Inputs
 294:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xFF;	//Pullups on
 296:	82 bb       	out	0x12, r24	; 18
}
 298:	08 95       	ret

0000029a <wait>:

void wait(int ms){
 29a:	9c 01       	movw	r18, r24
/* 	TCCR2: FOC2 WGM20 COM21 COM20 WGM21 CS22 CS21 CS20
		CS22 CS21 CS20
		 0    0    0	       stop
		 0    0    1       clk
		 0    1    0       clk/8
		 0    1    1       clk/32
		 1    0    0       clk/64
		 1    0    1       clk/128
		 1    1    0       clk/256
		 1    1    1       clk/1024	
*/
	TCCR2 = 0x0C;	//CTC Mode, clk/64
 29c:	8c e0       	ldi	r24, 0x0C	; 12
 29e:	85 bd       	out	0x25, r24	; 37
	OCR2 = 125;	//1000Hz
 2a0:	8d e7       	ldi	r24, 0x7D	; 125
 2a2:	83 bd       	out	0x23, r24	; 35
	for(;ms>0;ms--){
 2a4:	12 16       	cp	r1, r18
 2a6:	13 06       	cpc	r1, r19
 2a8:	54 f4       	brge	.+20     	; 0x2be
 2aa:	80 e8       	ldi	r24, 0x80	; 128
		while(!(TIFR&0x80));	//wait for compare matzch flag
 2ac:	08 b6       	in	r0, 0x38	; 56
 2ae:	07 fe       	sbrs	r0, 7
 2b0:	fd cf       	rjmp	.-6      	; 0x2ac
		TIFR=0x80;		//reset flag
 2b2:	88 bf       	out	0x38, r24	; 56
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	30 40       	sbci	r19, 0x00	; 0
 2b8:	12 16       	cp	r1, r18
 2ba:	13 06       	cpc	r1, r19
 2bc:	bc f3       	brlt	.-18     	; 0x2ac
	}
}
 2be:	08 95       	ret

000002c0 <main>:



int
main (void){
 2c0:	cf e2       	ldi	r28, 0x2F	; 47
 2c2:	d8 e0       	ldi	r29, 0x08	; 8
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	cd bf       	out	0x3d, r28	; 61
unsigned char * wheel_table1[] = {"1","1", "1,20","0,80", "0,60","0,40", "1","0,30", "0,40","0,60", "1,20","0,80", "0,60","0,40", "0,40","0,60", "1,60","0,30", "0,60","0,40", "0,40","0,60", "2,40","0,30"  };
 2c8:	80 e3       	ldi	r24, 0x30	; 48
 2ca:	5e 01       	movw	r10, r28
 2cc:	08 94       	sec
 2ce:	a1 1c       	adc	r10, r1
 2d0:	b1 1c       	adc	r11, r1
 2d2:	d5 01       	movw	r26, r10
 2d4:	eb ec       	ldi	r30, 0xCB	; 203
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	01 90       	ld	r0, Z+
 2da:	0d 92       	st	X+, r0
 2dc:	8a 95       	dec	r24
 2de:	e1 f7       	brne	.-8      	; 0x2d8

	init_Ports();
 2e0:	0e 94 44 01 	call	0x288

	display_init();
 2e4:	0e 94 7b 02 	call	0x4f6
	
	//display_print("Hello   World!");
	
	timer0_on();
 2e8:	0e 94 3a 01 	call	0x274
	sei();
 2ec:	78 94       	sei

	
	
	for(;;){
 2ee:	bf ef       	ldi	r27, 0xFF	; 255
 2f0:	db 2e       	mov	r13, r27
 2f2:	a1 e0       	ldi	r26, 0x01	; 1
 2f4:	ca 2e       	mov	r12, r26
	
		unsigned char delay;
	
		char x = 0;
 2f6:	ee 24       	eor	r14, r14
		for(x=0; x<48; x+=4){
		
		//PORTC=(PORTC&0x87)|(x/4)<<3;  //LEDS show number of field
		
		
		PORTC = PORTC|0x04;
 2f8:	aa 9a       	sbi	0x15, 2	; 21
		STOP1 = 0xFF;	//Stop off;
 2fa:	d0 92 0b 01 	sts	0x010B, r13
		RUN1 = 1;
 2fe:	c0 92 0a 01 	sts	0x010A, r12
		for(delay = 0x40; delay >= 0x0E; delay--){
 302:	f0 e4       	ldi	r31, 0x40	; 64
 304:	ff 2e       	mov	r15, r31
 306:	00 e2       	ldi	r16, 0x20	; 32
 308:	10 e0       	ldi	r17, 0x00	; 0
			DELAY1 = delay;
 30a:	f0 92 10 01 	sts	0x0110, r15
			wait ( (0x60-delay)>>2 );
 30e:	c8 01       	movw	r24, r16
 310:	95 95       	asr	r25
 312:	87 95       	ror	r24
 314:	95 95       	asr	r25
 316:	87 95       	ror	r24
 318:	0e 94 4d 01 	call	0x29a
 31c:	fa 94       	dec	r15
 31e:	0f 5f       	subi	r16, 0xFF	; 255
 320:	1f 4f       	sbci	r17, 0xFF	; 255
 322:	8d e0       	ldi	r24, 0x0D	; 13
 324:	8f 15       	cp	r24, r15
 326:	88 f3       	brcs	.-30     	; 0x30a
	
		}
		
		wait(100);
 328:	84 e6       	ldi	r24, 0x64	; 100
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 4d 01 	call	0x29a
		
		
		PORTC = PORTC|0x20;
 330:	ad 9a       	sbi	0x15, 5	; 21
		STOP2 = 0xFF;
 332:	d0 92 0f 01 	sts	0x010F, r13
		RUN2 = 1;
 336:	c0 92 0c 01 	sts	0x010C, r12
		for(delay = 0x40; delay >= 0x0E; delay--){
 33a:	70 e4       	ldi	r23, 0x40	; 64
 33c:	f7 2e       	mov	r15, r23
 33e:	00 e2       	ldi	r16, 0x20	; 32
 340:	10 e0       	ldi	r17, 0x00	; 0
			DELAY2 = delay;
 342:	f0 92 09 01 	sts	0x0109, r15
			wait ( (0x60-delay)>>2 );
 346:	c8 01       	movw	r24, r16
 348:	95 95       	asr	r25
 34a:	87 95       	ror	r24
 34c:	95 95       	asr	r25
 34e:	87 95       	ror	r24
 350:	0e 94 4d 01 	call	0x29a
 354:	fa 94       	dec	r15
 356:	0f 5f       	subi	r16, 0xFF	; 255
 358:	1f 4f       	sbci	r17, 0xFF	; 255
 35a:	ed e0       	ldi	r30, 0x0D	; 13
 35c:	ef 15       	cp	r30, r15
 35e:	88 f3       	brcs	.-30     	; 0x342
		}
		
		display_clear_line(0);
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 5a 02 	call	0x4b4
		display_print(wheel_table1[(x>>2)<<1]);
 366:	8e 2d       	mov	r24, r14
 368:	85 95       	asr	r24
 36a:	85 95       	asr	r24
 36c:	08 2f       	mov	r16, r24
 36e:	11 27       	eor	r17, r17
 370:	07 fd       	sbrc	r16, 7
 372:	10 95       	com	r17
 374:	00 0f       	add	r16, r16
 376:	11 1f       	adc	r17, r17
 378:	00 0f       	add	r16, r16
 37a:	11 1f       	adc	r17, r17
 37c:	0a 0d       	add	r16, r10
 37e:	1b 1d       	adc	r17, r11
 380:	f8 01       	movw	r30, r16
 382:	80 81       	ld	r24, Z
 384:	91 81       	ldd	r25, Z+1	; 0x01
 386:	0e 94 45 02 	call	0x48a
		
		display_clear_line(1);
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 5a 02 	call	0x4b4
		display_print(wheel_table1[((x>>2)<<1)+1]);
 390:	f8 01       	movw	r30, r16
 392:	82 81       	ldd	r24, Z+2	; 0x02
 394:	93 81       	ldd	r25, Z+3	; 0x03
 396:	0e 94 45 02 	call	0x48a
		
		
		wait(1500);
 39a:	8c ed       	ldi	r24, 0xDC	; 220
 39c:	95 e0       	ldi	r25, 0x05	; 5
 39e:	0e 94 4d 01 	call	0x29a
		
		
		STOP1 = x;
 3a2:	e0 92 0b 01 	sts	0x010B, r14
		wait (500);
 3a6:	84 ef       	ldi	r24, 0xF4	; 244
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 4d 01 	call	0x29a
		PORTC = (PORTC & ~0x04);
 3ae:	aa 98       	cbi	0x15, 2	; 21
	
		wait(800);
 3b0:	80 e2       	ldi	r24, 0x20	; 32
 3b2:	93 e0       	ldi	r25, 0x03	; 3
 3b4:	0e 94 4d 01 	call	0x29a
		
		STOP2 = x;
 3b8:	e0 92 0f 01 	sts	0x010F, r14
		wait (500);
 3bc:	84 ef       	ldi	r24, 0xF4	; 244
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	0e 94 4d 01 	call	0x29a
		PORTC = (PORTC & ~0x20);
 3c4:	ad 98       	cbi	0x15, 5	; 21
	
		
		
		wait (1000);
 3c6:	88 ee       	ldi	r24, 0xE8	; 232
 3c8:	93 e0       	ldi	r25, 0x03	; 3
 3ca:	0e 94 4d 01 	call	0x29a
 3ce:	f4 e0       	ldi	r31, 0x04	; 4
 3d0:	ef 0e       	add	r14, r31
 3d2:	8f e2       	ldi	r24, 0x2F	; 47
 3d4:	8e 15       	cp	r24, r14
 3d6:	0c f0       	brlt	.+2      	; 0x3da
 3d8:	8f cf       	rjmp	.-226    	; 0x2f8
 3da:	8d cf       	rjmp	.-230    	; 0x2f6

000003dc <setletter>:
unsigned char ADDRESS=0; 



static void setletter(unsigned char disp, unsigned char addr, unsigned char data){
 3dc:	58 2f       	mov	r21, r24
 3de:	24 2f       	mov	r18, r20
	DISP_PORT = data>>2;
 3e0:	84 2f       	mov	r24, r20
 3e2:	86 95       	lsr	r24
 3e4:	86 95       	lsr	r24
 3e6:	8b bb       	out	0x1b, r24	; 27
	DISP_PORT |= 0x20;
 3e8:	dd 9a       	sbi	0x1b, 5	; 27
	DISP_PORT &= ~0x20;
 3ea:	dd 98       	cbi	0x1b, 5	; 27
	
	DISP_PORT =  (data&0x03) | ( (0x03-addr) << 2);
 3ec:	23 70       	andi	r18, 0x03	; 3
 3ee:	83 e0       	ldi	r24, 0x03	; 3
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	86 1b       	sub	r24, r22
 3f4:	91 09       	sbc	r25, r1
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	28 2b       	or	r18, r24
 400:	2b bb       	out	0x1b, r18	; 27
	DISP_PORT |= 0x40;
 402:	de 9a       	sbi	0x1b, 6	; 27
	DISP_PORT &= ~0x40;
 404:	de 98       	cbi	0x1b, 6	; 27
	
	DISP_PORT = 0x0F ^ (0x01<<disp);
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 c0       	rjmp	.+4      	; 0x410
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	5a 95       	dec	r21
 412:	e2 f7       	brpl	.-8      	; 0x40c
 414:	2f e0       	ldi	r18, 0x0F	; 15
 416:	82 27       	eor	r24, r18
 418:	8b bb       	out	0x1b, r24	; 27
	DISP_PORT |= 0x80;
 41a:	df 9a       	sbi	0x1b, 7	; 27
	DISP_PORT &= ~0x80;
 41c:	9f e7       	ldi	r25, 0x7F	; 127
 41e:	8b b3       	in	r24, 0x1b	; 27
 420:	89 23       	and	r24, r25
 422:	8b bb       	out	0x1b, r24	; 27
	
	DISP_PORT = 0x0F;
 424:	2b bb       	out	0x1b, r18	; 27
	DISP_PORT |= 0x80;
 426:	df 9a       	sbi	0x1b, 7	; 27
	DISP_PORT &= ~0x80;
 428:	8b b3       	in	r24, 0x1b	; 27
 42a:	89 23       	and	r24, r25
 42c:	8b bb       	out	0x1b, r24	; 27
}
 42e:	08 95       	ret

00000430 <display_clear>:


void display_clear(){
 430:	1f 93       	push	r17
 432:	cf 93       	push	r28
	unsigned char x,y;
	for(x=0;x<4;x++){
 434:	10 e0       	ldi	r17, 0x00	; 0
		for(y=0;y<4;y++){
 436:	c0 e0       	ldi	r28, 0x00	; 0
			setletter(x,y,' ');
 438:	40 e2       	ldi	r20, 0x20	; 32
 43a:	6c 2f       	mov	r22, r28
 43c:	81 2f       	mov	r24, r17
 43e:	0e 94 ee 01 	call	0x3dc
 442:	cf 5f       	subi	r28, 0xFF	; 255
 444:	c4 30       	cpi	r28, 0x04	; 4
 446:	c0 f3       	brcs	.-16     	; 0x438
 448:	1f 5f       	subi	r17, 0xFF	; 255
 44a:	14 30       	cpi	r17, 0x04	; 4
 44c:	a0 f3       	brcs	.-24     	; 0x436
		}
	}
}
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	08 95       	ret

00000454 <display_char>:

void display_char(char c){
 454:	28 2f       	mov	r18, r24
	ADDRESS &= 0x0F;
 456:	80 91 08 01 	lds	r24, 0x0108
 45a:	98 2f       	mov	r25, r24
 45c:	9f 70       	andi	r25, 0x0F	; 15
 45e:	90 93 08 01 	sts	0x0108, r25
	setletter(ADDRESS>>2, ADDRESS & 0x03, c);
 462:	83 70       	andi	r24, 0x03	; 3
 464:	96 95       	lsr	r25
 466:	96 95       	lsr	r25
 468:	42 2f       	mov	r20, r18
 46a:	68 2f       	mov	r22, r24
 46c:	89 2f       	mov	r24, r25
 46e:	0e 94 ee 01 	call	0x3dc
	if ( ++ADDRESS == 0x10) ADDRESS = 0;
 472:	80 91 08 01 	lds	r24, 0x0108
 476:	8f 5f       	subi	r24, 0xFF	; 255
 478:	80 93 08 01 	sts	0x0108, r24
 47c:	80 31       	cpi	r24, 0x10	; 16
 47e:	09 f0       	breq	.+2      	; 0x482
}
 480:	08 95       	ret
 482:	10 92 08 01 	sts	0x0108, r1
 486:	fc cf       	rjmp	.-8      	; 0x480
 488:	08 95       	ret

0000048a <display_print>:

void display_print(char * text){
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	ec 01       	movw	r28, r24
	char c;
	for (;(c = *text++);display_char(c));
 490:	89 91       	ld	r24, Y+
 492:	88 23       	and	r24, r24
 494:	29 f0       	breq	.+10     	; 0x4a0
 496:	0e 94 2a 02 	call	0x454
 49a:	89 91       	ld	r24, Y+
 49c:	88 23       	and	r24, r24
 49e:	d9 f7       	brne	.-10     	; 0x496
}
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <display_set_cursor>:

void display_set_cursor(unsigned char line, unsigned char pos){
	ADDRESS = 8*line + pos;
 4a6:	88 0f       	add	r24, r24
 4a8:	88 0f       	add	r24, r24
 4aa:	88 0f       	add	r24, r24
 4ac:	86 0f       	add	r24, r22
 4ae:	80 93 08 01 	sts	0x0108, r24
}
 4b2:	08 95       	ret

000004b4 <display_clear_line>:

void display_clear_line(unsigned char line){
 4b4:	0f 93       	push	r16
 4b6:	1f 93       	push	r17
 4b8:	cf 93       	push	r28
	ADDRESS = 8*line;
 4ba:	08 2f       	mov	r16, r24
 4bc:	11 27       	eor	r17, r17
 4be:	c8 01       	movw	r24, r16
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	80 93 08 01 	sts	0x0108, r24
	unsigned char x;
	for(x=0;x<8;x++){
 4d0:	c0 e0       	ldi	r28, 0x00	; 0
		display_char(' ');
 4d2:	80 e2       	ldi	r24, 0x20	; 32
 4d4:	0e 94 2a 02 	call	0x454
 4d8:	cf 5f       	subi	r28, 0xFF	; 255
 4da:	c8 30       	cpi	r28, 0x08	; 8
 4dc:	d0 f3       	brcs	.-12     	; 0x4d2
	}
	ADDRESS = 8*line;
 4de:	00 0f       	add	r16, r16
 4e0:	11 1f       	adc	r17, r17
 4e2:	00 0f       	add	r16, r16
 4e4:	11 1f       	adc	r17, r17
 4e6:	00 0f       	add	r16, r16
 4e8:	11 1f       	adc	r17, r17
 4ea:	00 93 08 01 	sts	0x0108, r16
}
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	08 95       	ret

000004f6 <display_init>:

void display_init(){
	DISP_DDR = 0xFF;
 4f6:	8f ef       	ldi	r24, 0xFF	; 255
 4f8:	8a bb       	out	0x1a, r24	; 26
	
	DISP_PORT =  0x0F;
 4fa:	8f e0       	ldi	r24, 0x0F	; 15
 4fc:	8b bb       	out	0x1b, r24	; 27
	DISP_PORT |= 0x80;
 4fe:	df 9a       	sbi	0x1b, 7	; 27
	DISP_PORT &= ~0x80;
 500:	df 98       	cbi	0x1b, 7	; 27

	display_clear();
 502:	0e 94 18 02 	call	0x430
}
 506:	08 95       	ret
